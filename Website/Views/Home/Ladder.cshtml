@using System.Linq;
@using Website.Models;
@using Website.MiddleTier;
@model Website.Models.Ladder



@{
	ViewBag.Title = "Fire Ice Ladder";
}
<div class="heading">
	<h1>Fire & Ice Ladder</h1>
	<p>Welcome to the Terra Mystica Fire & Ice Ladder. Rules can be found <a href="#Rules">here</a>.</p>
	<p>To join, leave, or take a sabbatical, email <a href="mailto:FireIceLadder@gmail.com">FireIceLadder@gmail.com</a> with your snellman username.</p>
</div>
<h2>Completed Games</h2>
<table>
	<tr>
		@foreach (Game game in Model.Games)
		{
			<td>
				<div class="GameNumber@(game.WeekNumber>4?game.GameNumber:0)">
					<a href="https://terra.snellman.net/game/@game.name">@game.name.Replace("FireIceLadder", "")</a>
				</div>
				<div style="font-size:smaller;" class="Finished@(Math.Floor(game.seconds_since_update/86400))">Finished @(new TimeSpan(0, 0, (int)(game.seconds_since_update)).ToString("%d"))d ago</div>

				@foreach (GamePlayer player in game.GamePlayers.OrderBy(x => x.rank))
				{
					<div class="playerinfo">
						<span class="medal-circle medal-@player.rank">@(player.rank)</span><text> </text>
						@if (player.faction != null && player.faction.Length > 0)
						{
							<span class="faction-box @player.faction">@player.faction.Substring(0, 1).ToUpper()</span>
						}
						<span class="@(player.dropped==1 ? "dropped" : "")">@(player.playername)<text> (</text>@player.vp<text>)</text></span>
					</div>
				}
			</td>
		}
		<td><a href="#W1Games">Initialisation games</a></td>
	</tr>
	<tr>
		@foreach (Game game in Model.Games)
		{
			bool IsFirstGame = (game.name == Model.Games.First().name);

			<td @(IsFirstGame ? "class=CurrentLadder" : "")>

				<b>@(IsFirstGame ? "Latest Ladder" : "Intermediate Ladder")</b>
				<table class="LadderTable">
					@foreach (LadderPlayer LadderPlayer in game.Ladder.OrderBy(x => x.Position))
					{
						<tr>

							@if (LadderPlayer.OldPosition == null)
							{
								<td style="color:gold;vertical-align:top;">&#9733;</td>
							}
							else if (LadderPlayer.Position > LadderPlayer.OldPosition)
							{
								<td style="color:darkred;">&darr;@(LadderPlayer.Position - LadderPlayer.OldPosition)</td>
							}
							else if (LadderPlayer.Position < LadderPlayer.OldPosition)
							{
								<td style="color:darkgreen;">&uarr;@(LadderPlayer.OldPosition - LadderPlayer.Position)</td>
							}
							else
							{
								<td style="color:black;"></td>
							}


							@if (IsFirstGame)
							{
								<td>@(LadderPlayer.Position) </td>
								<td>
									<a style="color:#0645AD" href="https://terra.snellman.net/player/@(LadderPlayer.PlayerName)">@(LadderPlayer.PlayerName)</a>
								</td>
							}
							else
							{
								<td>@(LadderPlayer.Position) </td>
								<td>@(LadderPlayer.PlayerName)</td>
							}

						</tr>
					}

				</table>
			</td>
		}
		<td>
			<b>Initial Ladder</b>
			<table class="LadderTable">

				@foreach (LadderPlayer LadderPlayer in (Model.W1Games as List<Game>).First().Ladder.OrderBy(x => x.Position))
				{
					<tr>



						<td>@(LadderPlayer.Position) </td>
						<td>@(LadderPlayer.PlayerName)</td>

					</tr>}
			</table>
		</td>

		</td>
</table>

<h2>Running Games</h2>
<table>
	<tr>
		@foreach (Game game in (Model.RunningGames as List<Game>).OrderByDescending(x => x.round).ThenBy(x => x.id))
		{
			<td>
				<div class="GameNumber@(game.WeekNumber>4?game.GameNumber:0)">
					<a href="https://terra.snellman.net/game/@game.name">@game.name.Replace("FireIceLadder", "")</a><text> (R</text>@game.round<text>)</text>
				</div>
				@foreach (GamePlayer player in game.GamePlayers.OrderBy(x => x.playername))
				{
					<div class="playerinfo">
						@if (player.faction != null && player.faction.Length > 0)
						{
							<span class="faction-box @player.faction">@player.faction.Substring(0, 1).ToUpper()</span>
						}
						<span class="@(player.dropped==1 ? "dropped" : "")">@(player.playername)</span>
					</div>
				}
			</td>
		}
	</tr>
</table>

<div id="W1Games">
	<h2>Completed W1 Games</h2>
	<table>
		<tr>
			@foreach (Game game in (Model.W1Games as List<Game>).OrderByDescending(x => x.seconds_since_update))
			{
				<td>
					<a href="https://terra.snellman.net/game/@game.name">@game.name.Replace("FireIceLadder", "")</a>
					@foreach (GamePlayer player in game.GamePlayers.OrderBy(x => x.rank).ThenBy(x => x.playername))
					{
						<div class="playerinfo">
							<span class="medal-circle medal-@player.rank">@(player.rank)</span><text> </text>
							@if (player.faction != null && player.faction.Length > 0)
							{
								<span class="faction-box @player.faction">@player.faction.Substring(0, 1).ToUpper()</span><text> </text>
							}
							@(player.playername)<text> (</text>@player.vp<text>)</text>
						</div>

					}
				</td>
			}
		</tr>
	</table>
</div>


<div id="MarathonTable">
	<h2>gmg Marathon proposal</h2>
	<p>Score = sum of (1000/(game number * rank))</p>
	<table>
		<tr>
			<td>
				Player
			</td>
			<td>
				Score
			</td>
			@for (int i = 0; i < Model.Games.First().WeekNumber; i++)
	{
		<td style="width:30px;">W@(Model.Games.First().WeekNumber - i)</td>
}
		</tr>
		@foreach (LadderPlayer ladderplayer in (Model.Games.First().Ladder.Where(x => x.gmgMarathonScore > 0).OrderByDescending(x => x.gmgMarathonScore)))
		{
		<tr>
			<td>
				@ladderplayer.PlayerName
			</td>
			<td>
				@ladderplayer.gmgMarathonScore
			</td>
			@for (int i = 0; i < Model.Games.First().WeekNumber; i++)
	{
			<td>
				@if (ladderplayer.Games.ContainsKey(Model.Games.First().WeekNumber - i))
	{
		PlayerGameInfo Info = ladderplayer.Games[Model.Games.First().WeekNumber - i];
			<text>

				<div class="playerinfo">

					<span class="faction-box" style="background-color:deepskyblue;text-decoration:none">
						<a href="https://terra.snellman.net/game/FireIceLadderW@(Model.Games.First().WeekNumber - i)G@(Info.GameNumber)">
							G@(Info.GameNumber)

						</a>
					</span>&nbsp;
					<span class="medal-circle medal-@Info.Rank">@(Info.Rank)</span><text>&nbsp;</text>
					@if (Info.Faction != null && Info.Faction.Length > 0)
	{
				<span class="faction-box @Info.Faction">@Info.Faction.Substring(0, 1).ToUpper()</span>
}
				</div>
				</text>


}
			</td>
}
		</tr>
		}
		</tr>
	</table>
</div>


<div id="Rules">
	<h2>Rules</h2>
	<h3>Ladder Structure</h3>
	<p>
		New games are started every 2 weeks. (Roughly every other Sunday, but bear in mind this is manually administered so may have to fit round my schedule a little)<br />
		Opponents are determined by ladder position - the top four active players are drawn together, and so on.<br />
		The following four maps are used with equal frequency: Original, Fire and Ice Side 1, Loon Lakes, Fjords.<br />
		Games will be 4p, with the bottom 0-3 games being 3p as required.<br />
		Games are created with the following options: Mini expansion, Shipping bonus tile, Temple round scoring tile, Extra final scoring tile, Turn order determined by passing order, Fire & Ice expansion, Automatic email notifications.<br />
		The Time Limit will be a chess clock, 5d + 2d per round, grace period 8 hours. There is no deadline to complete games.<br />
		Roughly speaking, winning a game improves your ladder position by 25% (min 5 rungs), coming second improves your position by 10% (min 2 rungs), losing worsens your position by 5% (min 1 rung). More detailed algorithm below.
	</p>

	<h3>Determining Ladder Position - details</h3>
	<p>
		To determine ladder positions, the following algorithm is applied to each game in a pre-defined order (by gameweek, higher numbered games first - but note that weeks 2-7 are instead applied in finish order for legacy reasons; W1 was the initialisation week):<br />
		Anyone in the game who's not yet on the ladder, gets added at the bottom of the ladder, in order of finishing position (alphabetically in the case of a tie).<br />
		Everyone in the game gets their new ladder position calculated as follows (L is current ladder position, S is the score as determined by the table below).<br />
		For positive S: New L = Floor(Min(L *(1 - S/20), L - S)) <br />
		For negative S: New L = Ceiling(Max(L *(1 - S/20), L - S)) <br />
		If N players from the game receive the same new position, they are allocated positions L through L+ N - 1 ordered by position in the game and then alphabetically.<br />
		Ls are adjusted such that they are between 1 and (# of players on ladder).<br />
		Everyone else on the ladder gets shunted down/up rungs to accommodate the new positions.
	</p>

	<table>
		<tr>
			<th>Players in game</th>
			<th>Position</th>
			<th>S</th>
		</tr>
		<tr>
			<td>4</td>
			<td>1</td>
			<td>5</td>
		</tr>
		<tr>
			<td>4</td>
			<td>2</td>
			<td>2</td>
		</tr>
		<tr>
			<td>4</td>
			<td>3</td>
			<td>0</td>
		</tr>
		<tr>
			<td>4</td>
			<td>4</td>
			<td>-1</td>
		</tr>
		<tr>
			<td>3</td>
			<td>1</td>
			<td>4</td>
		</tr>
		<tr>
			<td>3</td>
			<td>2</td>
			<td>1</td>
		</tr>
		<tr>
			<td>3</td>
			<td>3</td>
			<td>-1</td>
		</tr>
		<tr>
			<td>Either</td>
			<td>Drop</td>
			<td>-4</td>
		</tr>
	</table>
	<p>(For ties, S is the average of the tied positions.)</p>

</div>

@using System.Linq;
@using Website.Models;
@using Website.MiddleTier;
@model Website.Models.Ladder



@{
	ViewBag.Title = "Fire Ice Ladder";
}
<div class="heading">
	<h1>Fire & Ice Ladder</h1>
	<p>Welcome to the Terra Mystica Fire & Ice Ladder. Rules can be found <a href="#Rules">here</a>.</p>
	<p>To join, leave, or take a sabbatical, email <a href="mailto:FireIceLadder@gmail.com">FireIceLadder@gmail.com</a> with your snellman username.</p>
</div>
<h2>Ladder</h2>
<table class="laddertable">
	<tr>
		@foreach (GameWeek GW in Model.GameWeeks)
		{
			bool GWFinished = !GW.Games.Exists(x => x.finished != 1);
		<th class="@(GWFinished?"GWFinished":"GWUnfinished")" colspan="4" >@GW.Name</th>


}
	</tr>
	@for (int i = 0; i < Model.NumRowsDivFive*5; i++)
	{
	<tr>
		@foreach (GameWeek GW in Model.GameWeeks)
	{
		bool GWFinished = !GW.Games.Exists(x => x.finished != 1);
		var Player = GW.Ladder.Where(x => x.Position == i + 1).FirstOrDefault();
		<td class="@(GWFinished?"GWFinished":"")">
			@if (Player != null)
			{
			if (Player.OldPosition == null)
			{
		<span style="color:gold;vertical-align:top;">&#9733;</span>
		}
		else if (Player.Position > Player.OldPosition)
		{
		<span style="color:darkred;">&darr;@(Player.Position - Player.OldPosition)</span>
		}
		else if (Player.Position < Player.OldPosition)
		{
		<span style="color:darkgreen;" >&uarr;@(Player.OldPosition - Player.Position)</span>
		}
		}

		</td>
		<td class="@(GWFinished?"GWFinished":"")">
			@if (Player != null)
		{
			<span class="@(Player.GameNumber == null ? "notplaying" : "playing")">@Player.Position</span>
	}
		</td>
		<td class="borderright @(GWFinished?"GWFinished":"")">
			@if (Player != null)
	{
			<span class="@(Player.GameNumber == null ? "notplaying" : "playing")">
				@Player.PlayerName</span>
	}
	else
	{
			<text>&nbsp;</text>
}
</td>
	if (i % 5 == 0)
	{
		if (GW.Games.Count() > i / 5)
		{
			Game game = GW.Games.OrderByDescending(x => x.index).ToList()[i / 5];
			<td rowspan="5" class="borderright borderabove borderbelow @(game.finished==1?game.seconds_since_update < 86400*2 ? "finishedrecently":"finished":"unfinished")">
				<div class="GameNumber@(game.WeekNumber > 4 ? game.GameNumber : 0)">
					<a href="https://terra.snellman.net/game/@game.name">@game.name.Replace("FireIceLadder", "")</a>
				</div>
				@if (game.finished == 1)
			{
				<div style="font-size:smaller;" class="Finished@(Math.Floor(game.seconds_since_update / 86400))">Finished @(new TimeSpan(0, 0, (int)(game.seconds_since_update)).ToString("%d"))d ago</div>
		}
		else
		{
			<div style="font-size:smaller;">Round @game.round</div>
	}
				@foreach (GamePlayer player in game.GamePlayers.OrderBy(x => x.rank))
			{<div class="playerinfo">
					<span class="medal-circle medal-@player.rank">@(player.rank)</span><text> </text>
					@if (player.faction != null && player.faction.Length > 0)
				{
					<span class="faction-box @player.faction">@player.faction.Substring(0, 1).ToUpper()</span>
			}
					<span class="@(player.dropped == 1 ? "dropped" : "")">@(player.playername)<text> @(game.finished == 1 ? "(" + player.vp + ")" : "")</text></span>
				</div>
		}

			</td>
	}
	else
	{
		<td rowspan="5" class="borderright"></td>
}
}
}

	</tr>
	}
</table>


<div id="MarathonTable">
	<h2>Marathon</h2>
	<table>
        <tr>
            <td>
                Player
            </td>
            <td>
                Best Result
            </td>
            @for (int i = 0; i < Model.GameWeeks.Max(x => x.ProcessingOrder); i++)
    {
        <td style="width:30px;">W@(Model.GameWeeks.Max(x => x.ProcessingOrder) - i)</td>
}
        </tr>
		@foreach (LadderPlayer ladderplayer in (Model.GameWeeks.First().Ladder.Where(x => x.Score !=null).OrderBy(x => x.Score.LowestGame).ThenBy(x => x.Score.LowestRank).ThenByDescending(x => x.Score.NumberofTimes)))
		{
        <tr>
            <td>
                @ladderplayer.PlayerName
            </td>
            <td>
                <span class="faction-box" style="background-color:deepskyblue;text-decoration:none">
                    G@(ladderplayer.Score.LowestGame)
                </span> &nbsp;
                <span class="medal-circle medal-@ladderplayer.Score.LowestRank">@(ladderplayer.Score.LowestRank)</span>
                @if (ladderplayer.Score.NumberofTimes > 1)
    {
            <text> (@ladderplayer.Score.NumberofTimes times)</text>
}
            </td>
            @for (int i = 0; i < Model.GameWeeks.Max(x => x.ProcessingOrder); i++)
    {
        <td>
            @if (ladderplayer.Games.ContainsKey(Model.GameWeeks.Max(x => x.ProcessingOrder) - i))
    {
        PlayerGameInfo Info = ladderplayer.Games[Model.GameWeeks.Max(x => x.ProcessingOrder) - i];
        <text>

            <div class="playerinfo">

                <span class="faction-box" style="background-color:deepskyblue;text-decoration:none">
                    <a href="https://terra.snellman.net/game/FireIceLadderW@(Model.GameWeeks.Max(x => x.ProcessingOrder) - i)G@(Info.GameNumber)">
                        G@(Info.GameNumber)

                    </a>
                </span>&nbsp;
                <span class="medal-circle medal-@Info.Rank">@(Info.Rank)</span><text>&nbsp;</text>
                @if (Info.Faction != null && Info.Faction.Length > 0)
        {
            <span class="faction-box @Info.Faction">@Info.Faction.Substring(0, 1).ToUpper()</span>
}
            </div>
        </text>


}
        </td>
}
        </tr>
		}
	</table>
</div>


<div id="Rules">
	<h2>Rules</h2>
	<h3>Ladder Structure</h3>
	<p>
		New games are started every 2 weeks. (Roughly every other Sunday, but bear in mind this is manually administered so may have to fit round my schedule a little)<br />
		Opponents are determined by ladder position - the top four active players are drawn together, and so on.<br />
		The following four maps are used with equal frequency: Original, Fire and Ice Side 1, Loon Lakes, Fjords.<br />
		Games will be 4p, with the bottom 0-3 games being 3p as required.<br />
		Games are created with the following options: Mini expansion, Shipping bonus tile, Temple round scoring tile, Extra final scoring tile, Turn order determined by passing order, Fire & Ice expansion, Automatic email notifications.<br />
		The Time Limit will be a chess clock, 5d + 2d per round, grace period 8 hours. There is no deadline to complete games.<br />
		Roughly speaking, winning a game improves your ladder position by 25% (min 5 rungs), coming second improves your position by 10% (min 2 rungs), losing worsens your position by 5% (min 1 rung). More detailed algorithm below.
	</p>

	<h3>Determining Ladder Position - details</h3>
	<p>
		To determine ladder positions, the following algorithm is applied to each game in a pre-defined order (by gameweek, higher numbered games first - but note that weeks 2-7 are instead applied in finish order for legacy reasons; W1 was the initialisation week):<br />
		Anyone in the game who's not yet on the ladder, gets added at the bottom of the ladder, in order of finishing position (alphabetically in the case of a tie).<br />
		Everyone in the game gets their new ladder position calculated as follows (L is current ladder position, S is the score as determined by the table below).<br />
		For positive S: New L = Floor(Min(L *(1 - S/20), L - S)) <br />
		For negative S: New L = Ceiling(Max(L *(1 - S/20), L - S)) <br />
		(From Gameweek 9, when going up the ladder, players who aren't in that gameweek are ignored - i.e. they're passed "for free")<br/>
		If N players from the game receive the same new position, they are allocated positions L through L+ N - 1 ordered by position in the game and then alphabetically.<br />
		Ls are adjusted such that they are between 1 and (# of players on ladder).<br />
		Everyone else on the ladder gets shunted down/up rungs to accommodate the new positions.
	</p>

	<table>
		<tr>
			<th>Players in game</th>
			<th>Position</th>
			<th>S</th>
		</tr>
		<tr>
			<td>4</td>
			<td>1</td>
			<td>5</td>
		</tr>
		<tr>
			<td>4</td>
			<td>2</td>
			<td>2</td>
		</tr>
		<tr>
			<td>4</td>
			<td>3</td>
			<td>0</td>
		</tr>
		<tr>
			<td>4</td>
			<td>4</td>
			<td>-1</td>
		</tr>
		<tr>
			<td>3</td>
			<td>1</td>
			<td>4</td>
		</tr>
		<tr>
			<td>3</td>
			<td>2</td>
			<td>1</td>
		</tr>
		<tr>
			<td>3</td>
			<td>3</td>
			<td>-1</td>
		</tr>
		<tr>
			<td>Either</td>
			<td>Drop</td>
			<td>-4</td>
		</tr>
	</table>
	<p>(For ties, S is the average of the tied positions.)</p>

</div>
